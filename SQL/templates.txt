CREATE TABLE "user"(
	user_id SERIAL PRIMARY KEY,
	"1c" JSONB,
	balance INT
);

INSERT INTO "user"("1c", balance)
VALUES ('{"username":"aa001", "test":"test"}'::jsonb, 100000),
       ('{"username":"aa002", "test":"test"}'::jsonb, 0)

CREATE TABLE item(
	item_id SERIAL PRIMARY KEY,
	"name" varchar(150) NOT NULL,
	description varchar(500),
	price INT,
	photo_path varchar(150),
	is_available BOOL NOT NULL,
	is_service BOOL NOT NULL
);

CREATE TABLE in_cart_item(
	in_cart_item_id SERIAL PRIMARY KEY,
	item_id INT UNIQUE REFERENCES item(item_id) ON DELETE CASCADE,
	quantity INT NOT NULL
);

CREATE TABLE cart(
	cart_id SERIAL PRIMARY KEY,
	in_cart_item_id INT REFERENCES in_cart_item(in_cart_item_id) ON DELETE CASCADE,
	user_id INT REFERENCES "user"(user_id) ON DELETE CASCADE,
	is_active BOOL,
	"date" DATE
);

CREATE TABLE refresh_token(
	user_id INT UNIQUE REFERENCES "user"(user_id) ON DELETE CASCADE,
	refresh_token_id varchar(50) UNIQUE
);

CREATE FUNCTION add_cart_item(int, int) RETURNS void AS
$$
BEGIN
	IF (SELECT is_available FROM item WHERE item_id = $1) = FALSE THEN
		RAISE EXCEPTION 'Item with selected item_id is not available for order';
	ELSE
		INSERT INTO in_cart_item(item_id, quantity)
		VALUES($1, $2)
		ON CONFLICT (item_id) DO UPDATE SET quantity = in_cart_item.quantity + $2;
	END IF;
END;
$$ LANGUAGE plpgsql;


--Пример с DECLARE
CREATE FUNCTION add_cart_item(int, int) RETURNS void AS
$$
DECLARE
	err text = 'Item with item_id = ' || $1 || ' is not available';
BEGIN
	IF (SELECT is_available FROM item WHERE item_id = $1) = FALSE THEN
		RAISE EXCEPTION '%', err;
	ELSE
		INSERT INTO in_cart_item(item_id, quantity)
		VALUES($1, $2)
		ON CONFLICT (item_id) DO UPDATE SET quantity = in_cart_item.quantity + $2;
	END IF;
END;
$$ LANGUAGE plpgsql;

create table place(
place_id serial primary key,
name varchar(64),
properties text);

create table reservation(
reservation_id serial primary key,
place_id int REFERENCES place(place_id) ON DELETE CASCADE,
start timestamp,
finish timestamp,
user_id int REFERENCES "user"(user_id) ON DELETE CASCADE);

CREATE VIEW actual_places AS
(SELECT p.place_id, p.name, p.properties, true AS is_avalible FROM place AS p
	JOIN reservation as r ON
	(p.place_id = r.place_id AND
	(r.start > localtimestamp OR r.finish < localtimestamp))
	OR (p.place_id != r.place_id)

	EXCEPT

	SELECT p.place_id, p.name, p.properties, true AS is_avalible FROM place AS p
	JOIN reservation as r ON
	p.place_id = r.place_id AND
	(r.start <= localtimestamp OR r.finish >= localtimestamp))

	UNION

	SELECT p.place_id, p.name, p.properties, false AS is_avalible FROM place AS p
	JOIN reservation as r ON
	p.place_id = r.place_id AND
	(r.start <= localtimestamp OR r.finish >= localtimestamp)

	order by place_id;