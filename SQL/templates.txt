CREATE TABLE "user"(
	user_id SERIAL PRIMARY KEY,
	"1c" JSONB,
	balance INT,
	"role" INT NOT NULL,
	"password" varchar(50),
	username varchar(50) UNIQUE
);

CREATE TABLE item(
	item_id SERIAL PRIMARY KEY,
	"name" varchar(150) NOT NULL,
	description varchar(500),
	price INT, photo_path varchar(150),
	is_available BOOL NOT NULL
);

CREATE TABLE in_cart_item(
	in_cart_item_id SERIAL PRIMARY KEY,
	cart_id INT REFERENCES cart(cart_id) ON DELETE CASCADE,
	item_id INT REFERENCES item(item_id) ON DELETE CASCADE,
	quantity INT NOT NULL);

ALTER TABLE in_cart_item ADD CONSTRAINT unique_constraint UNIQUE (item_id, cart_id);

CREATE TABLE cart(
	cart_id SERIAL PRIMARY KEY,
	user_id INT REFERENCES "user"(user_id) ON DELETE CASCADE,
	is_active BOOL, 
	"date" DATE
);

CREATE TABLE refresh_token(
	user_id INT UNIQUE REFERENCES "user"(user_id) ON DELETE CASCADE,
	refresh_token_id varchar(50) UNIQUE
);

CREATE VIEW in_active_cart_item AS
	(SELECT in_cart_item_id, in_cart_item.cart_id, item_id, quantity
	FROM in_cart_item
	JOIN cart ON in_cart_item.cart_id=cart.cart_id
	WHERE cart.is_active = true
);

CREATE TABLE place(
	place_id SERIAL PRIMARY KEY,
	name varchar(64),
	phone varchar(32) UNIQUE,
	internet bool,
	second_screen bool
);

CREATE TABLE reservation(
	reservation_id SERIAL PRIMARY KEY,
	place_id int REFERENCES place(place_id) ON DELETE CASCADE,
	"start" timestamp,
	finish timestamp,
	user_id int REFERENCES "user"(user_id) ON DELETE CASCADE
);

CREATE VIEW place_and_reservation AS (
	SELECT reservation.place_id, place.name, place.phone, reservation.start, reservation.finish, reservation.user_id
 	FROM reservation
 	JOIN place ON reservation.place_id = place.place_id
);

CREATE TABLE locker(
	locker_id SERIAL PRIMARY KEY,
	name varchar(64)
);

CREATE TABLE locker_reservation(
	locker_reservation_id SERIAL PRIMARY KEY,
	locker_id int REFERENCES locker(locker_id) ON DELETE CASCADE,
	"start" timestamp,
	finish timestamp,
	user_id int REFERENCES "user"(user_id) ON DELETE CASCADE
);

CREATE VIEW locker_and_locker_reservation AS (
	SELECT locker_reservation.locker_id, locker.name, locker_reservation.start, locker_reservation.finish, locker_reservation.user_id
 	FROM locker_reservation
 	JOIN locker ON locker_reservation.locker_id = locker.locker_id
);

CREATE TABLE post(
	post_id SERIAL PRIMARY KEY,
	title varchar(256),
	"text" text,
	creation_date timestamp NOT NULL,
	update_date timestamp
);

CREATE TABLE post_image(
	post_image_id SERIAL PRIMARY KEY,
	post_id INT REFERENCES post(post_id) ON DELETE CASCADE,
	"path" TEXT NOT NULL
);

CREATE TABLE tag(
	tag_id SERIAL PRIMARY KEY,
	"name" varchar(50) UNIQUE NOT NULL,
	color varchar(16) UNIQUE NOT NULL
);

CREATE TABLE in_post_tag(
	in_post_tag_id SERIAL PRIMARY KEY,
	tag_id INT REFERENCES tag(tag_id) ON DELETE CASCADE,
	post_id INT REFERENCES post(post_id) ON DELETE CASCADE
);

CREATE TABLE "like"(
	user_id INT REFERENCES "user"(user_id) ON DELETE CASCADE,
	post_id INT REFERENCES post(post_id) ON DELETE CASCADE
);

ALTER TABLE "like" ADD CONSTRAINT like_constraint UNIQUE (user_id, post_id);

CREATE TABLE comment(
	comment_id SERIAL PRIMARY KEY,
	user_id INT REFERENCES "user"(user_id) ON DELETE CASCADE,
	post_id INT REFERENCES post(post_id) ON DELETE CASCADE,
	"text" text,
	creation_date timestamp NOT NULL,
	update_date timestamp,
	is_checked boolean NOT NULL
);

CREATE VIEW likes_amount AS (
	SELECT post_id, COUNT(user_id) AS likes_amount
	FROM "like"
	GROUP BY post_id
);

CREATE VIEW post_tags AS (
	SELECT in_post_tag.post_id, tag.*
	FROM in_post_tag
	JOIN tag ON in_post_tag.tag_id = tag.tag_id
);